' # Particle Swarm Optimizer

' ## Fitness function

rosenbrock : Real -> Real -> Real =
  \x y. sq (1.0 - x) + 80.0*sq (y - x*x)

' We write one that uses vector for input

rosenbrock2 : ((Fin 2)=>Real) -> Real =
  \xs.
    x = xs.(fromOrdinal _ 0)
    y = xs.(fromOrdinal _ 1)
    rosenbrock x y

' Min should be at 1.0, 1.0

:p rosenbrock 1.0 1.000
> 0.0

:p rosenbrock2 [1.0, 1.000]
> 0.0

:p rosenbrock 1.0 1.02
> 3.2e-2

:p rosenbrock2 [1.0, 1.02]
> 3.2e-2


' ## Helper functions

minbyfst : (Real & a) -> (Real & a) -> (Real & a) = minBy fst

minimumbyfst : (n=>(Real & a)) -> (Real & a) = minimumBy fst

' ### Rand helpers

' make a random vector uniformly distributed between `lb` and `ub`

randBounded : Key -> (d=>Real)->(d=>Real)->(d=>Real) =
  \key lb ub.
    for i. lb.i + ((rand $ ixkey key i) * (ub.i - lb.i))

:p randBounded (newKey 4) [1.0,  -2.0] [-1.0,  2.0]
> [-0.3510105, 1.4935503]

' ## The Optimizer itself.
We have **arguments**:
 - type explicit, `np:Ix`: number of particles
 - type explicit, `niter:Ix`: number of iterations
 - type: `d:Ix`: number of dimensions in the domain of `f`, i.e. the search space.
 - `(momentum,gRate,pRate):(Real,Real,Real)`: PSO hyper-parameters to control exploration vs exploitation.
 - `f:(d=>Real)->Real`: loss function being minimized.
 - `(lb,ub):(d=>Real,d=>Real)`: boundries of the space being searched

' **Returns**: the optimal point found with-in the bounds on the input domain of `f`.

def particle_swarm_optimize
      (d:Type) ?->
      (key:Key)                                        -- random seed
      ((momentum, gRate, pRate):(Real & Real & Real))  -- momentum/pRate/gRate
      (np':Int)                                        -- number of particles
      (niter:Int)                                      -- number of iterations
      (f:(d=>Real)->Real)                              -- function to optimize
      ((lb,ub):(d=>Real & d=>Real))                    -- bounds
      : (d=>Real) =
    np = Fin np'
    optStep = \(keyL, gbest, pbests, positions, velocities).
        newPositions:(np=>d=>Real) = for p i.
            positions.p.i + velocities.p.i
        newPbests:(np=>(Real & d=>Real)) = for p.
            minbyfst pbests.p (f newPositions.p, newPositions.p)
        newGbest:(Real & d=>Real) =
            minbyfst gbest (minimumbyfst newPbests)
        (keyG, keyP, keyNext) = splitKey3 keyL
        (gscore, gloc) = gbest
        plocs = map snd pbests
        gVel:(np=>d=>Real) = for p i.
            weight = rand $ (ixkey2 keyG p i)
            dir = gloc.i - positions.p.i
            weight * dir
        pVel:(np=>d=>Real) = for p i.
            weight = rand $ (ixkey2 keyP p i)
            dir = plocs.p.i - positions.p.i
            weight * dir
        newVelocities:(np=>d=>Real) = for p i.
            momentum*velocities.p.i + gRate*gVel.p.i + pRate*gVel.p.i
        (keyNext,newGbest,newPbests,newPositions,newVelocities)
    randInit1 = \keyI1. randBounded keyI1 lb ub
    randInit  = \keyI. for p:np. randInit1 $ ixkey keyI p
    (keyPos, keyVel, keyLoop) = splitKey3 key
    initPositions:(np=>d=>Real) = randInit keyPos
    initVelocities:(np=>d=>Real) = randInit keyVel
    initPs:(np=>(Real & d=>Real)) = for p. (f initPositions.p, initPositions.p)
    initG:(Real & d=>Real) = minimumbyfst initPs
    inits = (keyLoop,initG,initPs,initPositions,initVelocities)
    res = fold inits (\iter:(Fin niter). optStep)
    (dc0,(finalGscore, finalGloc),dc1,dc2,dc3) = res
    finalGloc


' convenience function, with hard-coded key, and hyperparams

pso : Int -> Int -> ((d=>Real)->Real) -> (d=>Real & d=>Real) -> (d=>Real) =
    particle_swarm_optimize (newKey 0) (0.5, 0.3, 0.4)

' ---
Lets see how it goes.
Run it for more iterations and result should improve.
Which it indeed does.

:p pso 50 10 rosenbrock2 ([-10.0, -10.0],[20.0, 20.0])
> [3.7902775, 14.911414]

:p pso 50 20 rosenbrock2 ([-10.0, -10.0],[20.0, 20.0])
> [1.737736, 3.1227164]

:p pso 50 100 rosenbrock2 ([-10.0, -10.0],[20.0, 20.0])
> [1.0062338, 1.0128839]

:p pso 50 1000 rosenbrock2 ([-10.0, -10.0],[20.0, 20.0])
> [1.0, 1.0]

